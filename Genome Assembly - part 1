import networkx as nx
from IPython.display import Image


def composition(text, k):
    kmers = []
    stpind = len(text)-k+1
    for i in range(stpind):
        #print("i is: {}".format(i))
        #print("k is: {}".format(k))
        kmers.append(text[i:i+k])
    #print(kmers)
    return kmers

assert composition('CAATCCAAC', 5) == ['CAATC', 'AATCC', 'ATCCA', 'TCCAA', 'CCAAC']


def draw_graph(g):
    """displays a graph"""
    d = nx.drawing.nx_pydot.to_pydot(g)

    png_str = d.create_png()
    img = Image(data=png_str)
    display(img)
    
    
def debruijn(kmers):
    k = len(kmers[0])
    graph = nx.MultiDiGraph()
    for i in range (len(kmers)):
        newEdge = kmers[i]
        node1 = newEdge[0:k-1]
        node2 = newEdge[1:k]
        graph.add_node(node1)
        graph.add_node(node2)
        graph.add_edge(node1,node2)
    return graph
    
    
    
 k = 4
text = 'AAGATTCTCTAAGA'

kmers = composition(text, k)
g = debruijn(kmers)
draw_graph(g)


def create_graph(nodes, edges):
    graph = nx.MultiDiGraph()
    graph.add_nodes_from(nodes)
    graph.add_edges_from(edges)
    
    return graph
    
    
def get_euler_cycle_nodes(graph):
    """Returns a list of nodes representing an eulerian cycle"""
    cycle_nodes = [u for u, v in nx.eulerian_circuit(graph)]

    return cycle_nodes
    
    
nodes = list(range(10))
edges = [(0, 3), (1, 0), (2, 1), (2, 6), (3, 2), (4, 2), (5, 4), (6, 5), (6, 8), (7, 9), (8, 7), (9, 6)]

graph = create_graph(nodes, edges)
cycle_nodes = get_euler_cycle_nodes(graph)

expected_ans = [0, 3, 2, 6, 8, 7, 9, 6, 5, 4, 2, 1]

assert len(expected_ans) == len(cycle_nodes)
assert ' '.join([str(elem) for elem in expected_ans]) in ' '.join([str(elem) for elem in cycle_nodes + cycle_nodes])


nodes = list(range(9))
edges = [(0, 2), (1, 3), (2, 1), (3, 0), (3, 4), (5, 3), (5, 6), (6, 7), (7, 8), (8, 5)]

graph = create_graph(nodes, edges)
draw_graph(graph)


def eulerize(graph):
    """
    Adds an edge between two nodes in order to create an euler cycle
    
    Args:
        graph: a graph with an Euler path

    Returns:
        The starting node of an eulerian path
    """
    outnode=-1
    innode=-1
    flag = False
    for n in graph.nodes():
        if(graph.in_degree(n) > graph.out_degree(n)):
            outnode = n
        elif(graph.in_degree(n) < graph.out_degree(n)):
            innode = n
        if((innode != -1) and (outnode != -1)and not flag):
            graph.add_edge(outnode,innode)
            flag = True

    return innode
    
    
eulerize(graph)
draw_graph(graph)


def get_euler_path(graph):
    
    src_node = eulerize(graph)
    
    nodes = [u for u, v in nx.eulerian_circuit(graph,source = src_node)]
   
    return nodes
    
    
nodes = list(range(9))
edges = [(0, 2), (1, 3), (2, 1), (3, 0), (3, 4), (5, 3), (5, 6), (6, 7), (7, 8), (8, 5)]

graph = create_graph(nodes, edges)
path = get_euler_path(graph)

expected_ans = [5, 6, 7, 8, 5, 3, 0, 2, 1, 3, 4]

assert expected_ans == path


def path_to_genome(kmers):
    k = len(kmers)
    text=['']
    text.append(kmers[0])
    for i in range (1,k):
        kmer = kmers[i]
        text.append(kmer[-1])
    return ''.join(text)       
    
    
nodes = ['ACCGA',
        'CCGAA',
        'CGAAG',
        'GAAGC',
        'AAGCT']

assert path_to_genome(nodes) == 'ACCGAAGCT'


def string_reconstruction(patterns):
   
    graph = debruijn(patterns)
    nodes = get_euler_path(graph)
    text = path_to_genome(nodes)
    
    return text
    
    
patterns = ['CTTA', 'ACCA', 'TACC', 'GGCT', 'GCTT', 'TTAC']

assert string_reconstruction(patterns) == 'GGCTTACCA'
